(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 'current_count' referenced before assignment"
p3
sS'layer'
p4
S'/home/wantsomechocolate/Code/WantsomeDashboards/applications/dashboard/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\ndef parse_acquisuite():\n\n    page_name=request.function\n\n    counter_data=db(db.page_visit_count.page_name==page_name).select().first()\n\n    if counter_data==None:\n\n        dummy = db.page_visit_count.insert(page_name=page_name, counter=1)\n\n    else:\n\n        current_count=counter_data.counter\n\n        current_count+=1\n\n        counter_data.update_record(counter=current_count)\n\n    return dict(current_count=current_count)\nresponse._vars=response._caller(parse_acquisuite)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/wantsomechocolate/Code/WantsomeDashboards/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/wantsomechocolate/Code/WantsomeDashboards/applications/dashboard/controllers/default.py", line 79, in <module>\n  File "/home/wantsomechocolate/Code/WantsomeDashboards/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/wantsomechocolate/Code/WantsomeDashboards/applications/dashboard/controllers/default.py", line 78, in parse_acquisuite\n    return dict(current_count=current_count)\nUnboundLocalError: local variable \'current_count\' referenced before assignment\n'
p11
s.